name: DevSecOps CI/CD Pipeline


# defines the event/workflow triggers
on:
  push:
    branches: [ main, devsecops/pipeline ]
  pull_request:
    branches: [ main, devsecops/pipeline ]



# these are the list of jobs that will be executed in the pipeline after the event is triggered
jobs:
# the build-and-test job will run on every push and pull request to the main branch
  build-and-test:
  # can be run on any OS, but we will use ubuntu-latest for this example
    # strategy:
    #   matrix:
    #   os: [ubuntu-latest, windows-latest, macos-latest]
    # runs-on: ${{ matrix.os }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Install dependencies in the /server directory
      - name: Install dependencies for server
        run: |
          cd server
          npm install

      # Install dependencies in the /client directory
      - name: Install dependencies for client
        run: |
          cd client
          npm install


  sonarcloud:
    name: SonarQube Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: cd server && npm install

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: ./server  # Your code directory
          args: >
            -Dsonar.projectKey=${{ vars.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ vars.SONAR_ORG }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}          # From GitHub Secrets
          SONAR_HOST_URL: https://sonarcloud.io            # SonarCloud URL

  security-check:
    name: OWASP Dependency-Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "NGO-Management"
          path: "./server"
          format: "HTML"
          out: "reports"

      - name: Upload Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports

  # docker-build-push:
  #   name: Build & Push Docker Images
  #   runs-on: ubuntu-latest
  #   needs: [build-and-test, sonar-scan, security-check]
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Build and Push Server Image
  #       run: |
  #         docker build -t ${{ secrets.DOCKER_USERNAME }}/ngo-server:latest ./server
  #         docker push ${{ secrets.DOCKER_USERNAME }}/ngo-server:latest

  #     - name: Build and Push Client Image
  #       run: |
  #         docker build -t ${{ secrets.DOCKER_USERNAME }}/ngo-client:latest ./client
  #         docker push ${{ secrets.DOCKER_USERNAME }}/ngo-client:latest

  # deploy:
  #   name: Deploy to Azure Web App
  #   runs-on: ubuntu-latest
  #   needs: docker-build-push

  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Login to Azure
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     - name: Deploy Server Container to Azure
  #       uses: azure/webapps-deploy@v2
  #       with:
  #         app-name: ${{ secrets.AZURE_WEBAPP_NAME_SERVER }}
  #         images: ${{ secrets.DOCKER_USERNAME }}/ngo-server:latest

  #     - name: Deploy Client Container to Azure
  #       uses: azure/webapps-deploy@v2
  #       with:
  #         app-name: ${{ secrets.AZURE_WEBAPP_NAME_CLIENT }}
  #         images: ${{ secrets.DOCKER_USERNAME }}/ngo-client:latest
